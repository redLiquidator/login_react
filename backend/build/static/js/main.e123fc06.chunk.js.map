{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","IsLoggedIn","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e123fc06.chunk.js","sourcesContent":["import {ExtendObservable, extendObservable} from 'mobx';\r\n\r\n/* UserStore */\r\n\r\nclass UserStore{\r\n    constructor(){\r\n        extendObservable(this,{\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React from 'react';\n\n//class based react component needs render method\nclass InputField extends React.Component{\n  render(){\n  return (\n    <div className=\"inputField\">\n      <input \n             className='input'\n             type={this.props.type}\n             placeholder={this.props.placeholder}\n             value={this.props.value}\n             onChange={(e)=> this.props.onChange(e.target.value)}\n      />\n    </div>\n  );\n}\n}\n\nexport default InputField;\n","import React from 'react';\n//class based react component needs render method\nclass SubmitButton extends React.Component{\n  render(){\n  return (\n    <div className=\"submitButton\">\n      <button\n          className='btn'\n          disabled={this.props.disabled}\n          onClick={() => this.props.onClick()}>\n {this.props.text}\n\n      </button>\n    </div>\n  );\n}\n}\n\nexport default SubmitButton;\n","import React from 'react';\nimport InputField from './InputField';\nimport SubmitButton from './SubmitButton';\nimport UserStore from './stores/UserStore';\n\n//class based react component needs render method\nclass LoginForm extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      username :'',\n      password :'',\n      buttonDisabled:false\n    }\n  }\n\n  setInputValue(property,val){\n    val = val.trim();\n    if(val.length >12){\n      return;\n    }\n    this.setState({\n      [property]: val\n    })\n  }\n\n  resetForm(){\n    this.setState({\n      username:'',\n      password:'',\n      buttonDisabled:false\n    })\n  }\n\n  async doLogin(){\n    if (!this.state.username){\n      return;\n    }\n    if(!this.state.password){\n      return;\n    }\n    this.setState({\n      buttonDisabled:true\n    })\n\n    try{\n      let res = await fetch('/login',{\n        method:'post',\n        headers:{\n          'Accept':'application/json',\n          'Content-Type':'application/json'\n        },\n        body:JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      });\n      let result = await res.json();\n      if(result && result.success){\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }else if (result&&result.success === false){\n        this.resetForm();\n        alert(result.msg);\n      }\n    } catch(e){\n        console.log(e);\n        this.resetForm();\n    }\n  }  \n  render(){\n  return (\n    <div className=\"loginForm\">\n      log in\n      <InputField \n          type='text' \n          placeholder='Username' \n          value={this.state.username ? this.state.username : ''}\n          onChange= {(val) => this.setInputValue('username',val)}\n      />\n       <InputField \n          type='password' \n          placeholder='Password' \n          value={this.state.password ? this.state.password : ''}\n          onChange= {(val) => this.setInputValue('password',val)}\n      />\n\n      <SubmitButton\n          text='Login'\n          disabled={this.state.buttonDisabled}\n          onClick={()=>this.doLogin()}\n      />\n    </div>\n  );\n}\n}\n\nexport default LoginForm;\n","import React        from 'react';\nimport {observer}   from 'mobx-react';\nimport UserStore    from './stores/UserStore';\nimport LoginForm    from './LoginForm';\nimport InputField   from './InputField';\nimport SubmitButton from './SubmitButton';\n\nimport './App.css';\n//class based react component needs render method\nclass App extends React.Component{\n\n  async componentDidMount(){\n\n    try{\n      let res = await fetch('./isLoggedIn',{\n        method: 'post',\n        headers: {\n          'Accept' : 'application/json',\n          'Content-Type' :  'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if(result && result.success){\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }else{\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n      }\n\n    }catch(e){\n       UserStore.loading = false;\n       UserStore.isLoggedIn = true;   \n    }\n  }\n\n  async doLogout  (){\n\n    try{\n      let res = await fetch('./logout',{\n        method: 'post',\n        headers: {\n          'Accept' : 'application/json',\n          'Content-Type' :  'application/json'\n        }\n      });\n      let result = await res.json();\n\n      if(result && result.success){\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n    }catch(e){\n       console.log(e);\n    }\n  }\n\n  render(){\n      if (UserStore.loading){\n            return(\n              <div className=\"app\">\n                  <div className='container'>\n            loading,please wait\n                  </div>\n              </div>\n            );\n      }else{\n        if(UserStore.IsLoggedIn){\n          return(\n            <div className=\"app\">\n                <div className='container'>\n          welcome,{UserStore.username}\n          <SubmitButton \n            text={'Log out'}\n            disabled={false}\n            onClick={() => this.doLogout()}\n          />\n                </div>\n            </div>\n          );\n        }\n\n\n            return (\n              <div className=\"app\">\n                  <div className='container'>\n                    <LoginForm/>\n                  </div>\n              </div>\n            );\n          }\n      }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}